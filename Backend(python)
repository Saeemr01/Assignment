from flask import Flask, request, jsonify
from flask_restful import Api, Resource
import os
import torch
from transformers import GPT2Tokenizer, GPT2Model

app = Flask(__name__)
api = Api(app)

# Load pre-trained GPT-2 model and tokenizer
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2Model.from_pretrained('gpt2')

# Set up file storage
UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

class UploadFile(Resource):
    def post(self):
        file = request.files['file']
        filename = file.filename
        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        return {'message': 'File uploaded successfully'}, 201

class SummarizeDocument(Resource):
    def post(self):
        file_path = request.json['file_path']
        with open(file_path, 'r') as f:
            text = f.read()
        inputs = tokenizer.encode_plus(
            text,
            add_special_tokens=True,
            max_length=512,
            return_attention_mask=True,
            return_tensors='pt'
        )
        outputs = model(inputs['input_ids'], attention_mask=inputs['attention_mask'])
        summary = torch.argmax(outputs.last_hidden_state[:, 0, :], dim=1)
        return {'summary': summary}

api.add_resource(UploadFile, '/upload')
api.add_resource(SummarizeDocument, '/summarize')

if __name__ == '__main__':
    app.run(debug=True)
